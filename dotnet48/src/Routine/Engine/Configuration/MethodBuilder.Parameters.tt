<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<# var count = 15; #>
using System;
using Routine.Engine.Virtual;

namespace Routine.Engine.Configuration
{
    public partial class MethodBuilder
    {
<# for(int i = 1; i<count+1; i++) { #>
	<# var list = Enumerable.Range(1, i); #>
	public VirtualMethod Virtual<<#= string.Join(", ", list.Select(l => "TParam" + l)) #>>(string name, Action<<#= string.Join(", ", list.Select(l => "TParam" + l)) #>> body)
		{
			return Virtual(name)
	<# for(int j = 0; j<i; j++) { #>
				.Parameters.Add(p => p.Virtual(body.Method.GetParameters()[<#= j #>]))
	<# } #>
				.Body.Set((target, parameters) =>
				{
					body(<#= string.Join(", ", list.Select(l => "(TParam" + l + ")parameters[" + (l-1) + "]")) #>);
					return null;
				})
			;
		}

		public VirtualMethod Virtual<<#= string.Join(", ", list.Select(l => "TParam" + l)) #>, TReturn>(string name, Func<<#= string.Join(", ", list.Select(l => "TParam" + l)) #>, TReturn> body)
		{
			return Virtual<TReturn>(name)
	<# for(int j = 0; j<i; j++) { #>
				.Parameters.Add(p => p.Virtual(body.Method.GetParameters()[<#= j #>]))
	<# } #>
				.Body.Set((target, parameters) => (object)body(<#= string.Join(", ", list.Select(l => "(TParam" + l + ")parameters[" + (l-1) + "]")) #>))
			;
		}
		
<# } #>
    }
}